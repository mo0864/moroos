{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport math\n\n# Begin project code\nvexcode_vision_7_objects = None\nvexcode_vision_7_object_index = None\nmyVariable = 0\nbarrier_height = 140\ndef myfunk(i)\n return vexcode_vision_7_objects[vexcode_vision_7_object_index].originY\n\n\ndef rangefind():\n    global myVariable, vexcode_vision_7_objects, vexcode_vision_7_object_index\n    screen_middle = 158\n    while true:\n        #takes all objects \n        vision_7_RED = vision_7.take_snapshot(vision_7__SIGRED)\n        vision_7_GREEN = vision_7.take_snapshot(vision_7__SIGGREEN)\n        #snapshot\n\n        for i in range(int(len(vexcode_vision_7_objects))):\n        height = 3\n        #for every object in vision objects\n            if vexcode_vision_7_objects[vexcode_vision_7_object_index].originY < barrier_height:\n            #if the center of the object is above tghe boundary it is filtered\n            numbers.append(i, height * math.tan(((vexcode_vision_7_objects[vexcode_vision_7_object_index].originY) * (40 / 212)) + 39) / 180 * math.pi)\n            numbers.sort(key=myFunc)\n            if vexcode_vision_7_objects[vexcode_vision_7_object_index].originY < barrier_height:\n            #if the center of the object is above tghe boundary it is filtered\n            numbers.append(i, height * math.tan(((vexcode_vision_7_objects[vexcode_vision_7_object_index].originY) * (40 / 212)) + 39) / 180 * math.pi)\n            numbers.sort(key=myFunc)\n\n\n    wait(20, MSEC)\n        \n\n        #for obj in range(int(len(vexcode_vision_7_objects))):\n        #    obj.update({'distance': height * math.tan(((obj.get('originY') * (40 / 212)) + 39) / 180 * math.pi)})\n        #    print(obj.get('originY'), obj.get('distance'))\n        #    print(obj)\n\n        \n    \n\n\n\n\n#numbers = [\n#  {'number': '1', 'originY': 148.4},\n#  {'number': '2', 'originY': 198},\n#  {'number': '3', 'originY': 60},\n#  {'number': '4', 'originY': 123}\n#]\n\nheight = 3\n\nfor obj in numbers:\n  obj.update({'distance': height * math.tan(((obj.get('originY') * (40 / 212)) + 70) / 180 * math.pi)})\n  print(obj.get('originY'), obj.get('distance'))\n  print(obj)\n\n\ndef myfunk(i)\n return vexcode_vision_7_objects[vexcode_vision_7_object_index].originY","textLanguage":"python","rconfig":[],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","target":"Physical"}