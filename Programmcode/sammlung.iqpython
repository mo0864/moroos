{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n\n# Farberkennung\nwhile True :\n    greensnap = vision_7.take_snapshot(vision_7__SIGGREEN)\n    bluesnap = vision_7.take_snapshot(vision_7__SIGBLUE)\n    redsnap = vision_7.take_snapshot(vision_7__SIGRED)\n    if greensnap is not None:\n        motor_6.spin_to_position(160, DEGREES)\n\n    elif redsnap is not None:\n        motor_6.spin_to_position(-160, DEGREES)\n    wait(0.2, SECONDS)\n\n# Kalibrierung\nmotor_1.set_timeout(1, SECONDS)\nmotor_1.set_max_torque(30, PERCENT)\nmotor_1.spin_for(FORWARD, 270, DEGREES)\nbrain.screen.print(motor_1.position(DEGREES))\npos1 = motor_1.position(DEGREES)\nmotor_1.spin_for(FORWARD, -270, DEGREES)\nbrain.screen.print(motor_1.position(DEGREES))\npos2 = motor_1.position(DEGREES)\nmotor_1.spin_to_position((pos1+pos2)/2, DEGREES)\n\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","target":"Physical"}