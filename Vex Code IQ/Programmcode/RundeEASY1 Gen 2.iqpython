{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\n# vex-vision-config:begin\nvision_7__SIGGREEN = Signature(1, -4233, -3763, -3998,-4929, -4323, -4626,11, 0)\nvision_7__SIGBLUE = Signature(2, -4445, -4143, -4294,3909, 4939, 4424,11, 0)\nvision_7__SIGRED = Signature(3, 8607, 9473, 9040,-1401, -1007, -1204,11, 0)\nvision_7__SIGYELLOW = Signature(4, -1, 257, 128,-4395, -4111, -4253,11, 0)\nvision_7__SIG_5 = Signature(5, 0, 0, 0,0, 0, 0,3, 0)\nvision_7__SIG_6 = Signature(6, 0, 0, 0,0, 0, 0,3, 0)\nvision_7__SIG_7 = Signature(7, 0, 0, 0,0, 0, 0,3, 0)\nvision_7 = Vision(Ports.PORT7, 50, vision_7__SIGGREEN, vision_7__SIGBLUE, vision_7__SIGRED, vision_7__SIGYELLOW, vision_7__SIG_5, vision_7__SIG_6, vision_7__SIG_7)\n# vex-vision-config:end\nmotor_1 = Motor(Ports.PORT1, False)\nmotor_3 = Motor(Ports.PORT3, False)\ncolor_12 = ColorSensor(Ports.PORT12)\ndistance_8 = Distance(Ports.PORT8)\ndistance_2 = Sonar(Ports.PORT2)\ndistance_6 = Distance(Ports.PORT6)\n\ngyro_11 = Gyro(Ports.PORT11)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n#MIT SENSOR NUMMER 2 VORNE\n\n# Funktion für die Drehung nach LINKS\ndef turnLeft():\n    # ein bisschen zurück, dann Kurve\n    motor_3.spin_for(REVERSE,0.2,TURNS)\n    motor_3.set_velocity(40,PERCENT)  # schneller um die Kurve\n    #motor_1.spin_for(FORWARD, 90,DEGREES)\n    motor_1.spin_for(FORWARD, 58,DEGREES)\n    motor_3.spin_for(FORWARD,0.7,TURNS)\n\n    #Ausgabe für Tests \n    print(\"motor1 after turning 90 degrees\")\n    motor1 = motor_1.position(DEGREES)\n    print(motor1)\n\n    #Motor 1 wieder gerade stellen\n    motor_1.spin_for(FORWARD,-58,DEGREES)\n    motor_3.spin_for(FORWARD,0.5,TURNS)\n\n    #Ausgabe für Tests\n    print(\"motor1 after turning back 90 degrees and moving\")\n    motor1 = motor_1.position(DEGREES)\n    print(motor1)\n\n    #Geschwindigkeit wieder reduzieren, damit der Rover nicht gegen die Wand landet\n    motor_3.set_velocity(20,PERCENT)\n\n#Funktion für die Drehung nach RECHTS (genau so wie LINKS)\ndef turnRight():\n    motor_3.spin_for(REVERSE,0.2,TURNS,wait=True)\n    motor_3.set_velocity(40,PERCENT)  # schneller um die Kurve\n    motor_1.spin_for(FORWARD, -58,DEGREES)\n    motor_3.spin_for(FORWARD,0.7,TURNS,wait=True)\n\n    #Ausgabe für Tests \n    print(\"motor1 after turning right 90 degrees\")\n    motor1 = motor_1.position(DEGREES)\n    print(motor1)\n\n    #Motor 1 wieder gerade stellen\n    motor_1.spin_for(FORWARD,58,DEGREES)\n    motor_3.spin_for(FORWARD,0.75,TURNS,wait=True)\n\n    #Ausgabe für Tests \n    print(\"motor1 after turning back 90 degrees\")\n    motor1 = motor_1.position(DEGREES)\n    print(motor1)\n\n    #Geschwindigkeit wieder reduzieren, damit der Rover nicht gegen die Wand landet\n    motor_3.set_velocity(20,PERCENT)\n\n# Langsam nach vorne fahren\ndef forwardSpin():\n    motor_3.spin_for(FORWARD,0.5,TURNS,wait=True)\n\n# MAIN\n\nmotor_3.set_stopping(HOLD)\nwait(1, SECONDS)\nmotor_3.set_velocity(20,PERCENT)\n#motor_1.spin_to_position(0,DEGREES,wait=False)   WHY DOESN'T THIS WORK\n\n#testen\n#unendliche Schleife\n\nwhile (True):                     \n     #Werte von Sensoren ablesen und speichern\n    front = distance_2.distance(MM)    \n    left = distance_8.object_distance(MM)\n    right = distance_6.object_distance(MM)\n\n    motor1 = motor_1.position(DEGREES)\n\n    #Ausgaben für Tests\n   \n   \n    #Wenn vorne genug Platz ist, fahre ein Stück weiter\n    if front > 400:\n        if left < 150 :\n            motor_1.spin_for(REVERSE,20,DEGREES)\n            motor_3.spin_for(FORWARD,0.75,TURNS)\n            motor_1.spin_for(FORWARD,20,DEGREES)\n            print(\"I adjust left\")\n            print(right, left)\n        elif right < 150 and right is not 50:\n            motor_1.spin_for(FORWARD,20,DEGREES)\n            motor_3.spin_for(FORWARD,0.75,TURNS)\n            motor_1.spin_for(REVERSE,20,DEGREES)\n            print(\"I adjust right\")\n            print(right, left)\n        else :\n            forwardSpin()\n            print(right, left)\n            print(\"I drive\")\n\n        \n            \n    #Wenn vorne nicht genug Platz, Richtung entscheiden und Kurve fahren\n    else:  \n        #Anhalten\n        print(\"I stop\")\n        motor_3.stop()  \n        #Werte der Sensoren vergleichen und entscheiden                       \n        if left > right:\n            print(right, left)\n            print(\"left turn\")\n            turnLeft()\n        else:\n            turnRight()\n            print(right, left)\n            print(\"turn right\")","textLanguage":"python","rconfig":[{"port":[7],"name":"vision_7","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIGGREEN\",\"parameters\":{\"uMin\":-4233,\"uMax\":-3763,\"uMean\":-3998,\"vMin\":-4929,\"vMax\":-4323,\"vMean\":-4626,\"rgb\":1,\"type\":0,\"name\":\"SIGGREEN\"},\"range\":11},{\"name\":\"SIGBLUE\",\"parameters\":{\"uMin\":-4445,\"uMax\":-4143,\"uMean\":-4294,\"vMin\":3909,\"vMax\":4939,\"vMean\":4424,\"rgb\":1,\"type\":0,\"name\":\"SIGBLUE\"},\"range\":11},{\"name\":\"SIGRED\",\"parameters\":{\"uMin\":8607,\"uMax\":9473,\"uMean\":9040,\"vMin\":-1401,\"vMax\":-1007,\"vMean\":-1204,\"rgb\":1,\"type\":0,\"name\":\"SIGRED\"},\"range\":11},{\"name\":\"SIGYELLOW\",\"parameters\":{\"uMin\":-1,\"uMax\":257,\"uMean\":128,\"vMin\":-4395,\"vMax\":-4111,\"vMean\":-4253,\"rgb\":1,\"type\":0,\"name\":\"SIGYELLOW\"},\"range\":11},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":268438496,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":268438496,\"type\":0,\"name\":\"SIG_6\"},\"range\":3},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":268438496,\"type\":0,\"name\":\"SIG_7\"},\"range\":3}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1],"name":"motor_1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"motor_3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"color_12","customName":false,"deviceType":"Color","deviceClass":"colorsensor","setting":{},"triportSourcePort":22},{"port":[8],"name":"distance_8","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[2],"name":"distance_2","customName":false,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[6],"name":"distance_6","customName":false,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[11],"name":"gyro_11","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","target":"Physical"}